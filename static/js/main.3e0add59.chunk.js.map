{"version":3,"sources":["Artist.js","Login.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Artist","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","expanded","setState","container","_this2","genresList","genre","props","artist","genres","react_default","a","createElement","className","src","images","url","id","name","followers","total","href","external_urls","spotify","target","title","onClick","toggle","React","Component","Login","redirect","Footer","rel","spotifyApi","SpotifyWebApi","App","token","getHashParams","access_token","setAccessToken","loggedIn","topArtists","nresults","time_range","expand_all","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","arguments","length","undefined","getMyTopArtists","limit","then","response","items","artistArray","artistImageURLs","i","push","map","item","src_Artist","text","possible","charAt","Math","floor","random","redirect_uri","generateRandomString","localStorage","setItem","encodeURIComponent","timeRange","_this3","getData","Container","Head","_this4","makeArtists","logout","updateTimeRange","scrollButton","src_Login","src_Footer","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e0add59.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Artist extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      expanded: false\n    };\n  }\n\n  toggle() {\n    this.setState({\n      expanded: !this.state.expanded\n    });\n  }\n\n  render() {\n    let container;\n    if (!this.state.expanded) {\n      container = (\n        <div className=\"unexpanded_artist_title\">\n          <p>{this.props.artist.name}</p>\n        </div>\n      );\n    } else {\n      let genresList = \"\";\n      for (var genre in this.props.artist.genres) {\n        genresList += this.props.artist.genres[genre] + \", \";\n      }\n      container = (\n        <div className=\"expanded_artist\">\n          <section className=\"img_box\">\n            <img src={this.props.artist.images[0].url} />\n          </section>\n          <div className=\"artist_details\">\n            <h1 id=\"expanded_title\">{this.props.artist.name}</h1>\n            <p id=\"expand_details\">\n              Followers: {this.props.artist.followers.total}\n            </p>\n            <p id=\"expand_details\">Genres: {genresList}</p>\n          </div>\n          <a\n            id=\"spotify_link_button\"\n            href={this.props.artist.external_urls.spotify}\n            target=\"blank\"\n            title=\"Go to artist's spotify page\"\n          >\n            <i className=\"fa fa-spotify fa-2x\" />\n          </a>\n        </div>\n      );\n    }\n\n    return (\n      //In this div display the artist picture, name, popularity and have it link to their spotify page\n      <div className=\"Artist\" onClick={() => this.toggle()}>\n        {container}\n      </div>\n    );\n  }\n}\n\nexport default Artist;\n","import React from \"react\";\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"login_container\">\n        <h1 id=\"main_title\">Statify</h1>\n\n        <p className=\"login_info_text\">\n          This application uses your spotify user listening information to\n          provide statistics on your top artists. Spotify's own login service is\n          used for authentication. To find out your listening info click the\n          button below and log in to your account.\n        </p>\n        <button className=\"login_button buttonDefault\" onClick={this.props.redirect}>\n          GO TO SPOTIFY LOGIN\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React from \"react\";\n\nclass Footer extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <footer id=\"main_footer\">\n        <p>\n          Created by <a href=\"https://github.com/jake-good/Statify\" target=\"_blank\" rel=\"noreferrer noopener\">Jake Good</a>\n        </p>\n        <a>\n          <i className=\"fa fa-github\" />\n        </a>\n        <a>\n          <i className=\"fa fa-person\" />\n        </a>\n      </footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./App2.css\";\nimport Artist from \"./Artist\";\nimport Login from \"./Login\";\nimport Footer from \"./Footer\";\n\nimport SpotifyWebApi from \"spotify-web-api-js\";\nconst spotifyApi = new SpotifyWebApi();\n\nclass App extends Component {\n  constructor() {\n    super();\n    const params = this.getHashParams();\n    const token = params.access_token;\n    if (token) {\n      spotifyApi.setAccessToken(token);\n    }\n    this.state = {\n      loggedIn: token ? true : false,\n      topArtists: [],\n      nresults: \"50\",\n      time_range: \"short_term\",\n      expand_all: false\n    };\n  }\n\n  getHashParams() {\n    var hashParams = {};\n    var e,\n      r = /([^&;=]+)=?([^&;]*)/g,\n      q = window.location.hash.substring(1);\n    while ((e = r.exec(q))) {\n      hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  getData(time_range = this.state.time_range) {\n    if (this.state.loggedIn) {\n      spotifyApi\n        .getMyTopArtists({\n          time_range: time_range,\n          limit: this.state.nresults\n        })\n        .then(response => this.setState({ topArtists: response.items }));\n      //this.getArtistPictures();\n    }\n  }\n\n  getArtistPictures() {\n    let images = \"\";\n    if (this.state.loggedIn) {\n      let artistArray = this.state.topArtists;\n      let artistImageURLs = [];\n      for (let i = 0; i < artistArray.length; i++) {\n        artistImageURLs.push(artistArray[i].images[0].url);\n      }\n      images = artistImageURLs.map(url => <img src={url} />);\n    }\n    return images;\n  }\n\n  makeArtists() {\n    let Artists = this.state.topArtists.map(item => <Artist artist={item} />);\n    return Artists;\n  }\n\n  generateRandomString(length) {\n    var text = \"\";\n    var possible =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < length; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n\n  redirect() {\n    var client_id = \"d8c9e8ca3c784898bdf939f51ff6136f\"; // Your client id\n    var redirect_uri = window.location.href;\n    var state = this.generateRandomString(16);\n    var stateKey = \"spotify_auth_state\";\n    localStorage.setItem(stateKey, state);\n    var scope = \"user-top-read\";\n    var url = \"https://accounts.spotify.com/authorize\";\n    url += \"?response_type=token\";\n    url += \"&client_id=\" + encodeURIComponent(client_id);\n    url += \"&scope=\" + encodeURIComponent(scope);\n    url += \"&redirect_uri=\" + encodeURIComponent(redirect_uri);\n    url += \"&state=\" + encodeURIComponent(state);\n    window.location = url;\n  }\n\n  updateTimeRange(timeRange) {\n    this.setState({time_range: timeRange}, () => this.getData());\n  }\n\n  logout() {\n    window.location.hash = '';\n    this.setState({ loggedIn: false});\n  }\n\n  render() {\n    let Container;\n    let Head;\n    let scrollButton;\n\n    if (!this.state.loggedIn) {\n      Container = (\n        <div>\n          <Login redirect={() => this.redirect()} />\n        </div>\n      );\n    } else {\n      if (this.state.topArtists.length === 0) {\n        this.getData();\n      }\n      Container = this.makeArtists(this.state.expand_all);\n      Head = (\n        <header>\n          <div className=\"headerDiv\">\n            <h1 id=\"main_title\">Statify</h1>\n            <button className=\"buttonInverse logoutButton\" onClick={() => this.logout()}>Log out</button>\n          </div>\n          <h2 id=\"sub_title\">How recent do you want your statistics?</h2>\n          <div className=\"button_container\">\n            <button className={(this.state.time_range === 'short_term' ? 'selected ' : '') + \"buttonDefault\"} onClick={() => this.updateTimeRange(\"short_term\")}>\n              1 month\n            </button>\n            <button className={(this.state.time_range === 'medium_term' ? 'selected ' : '') + \"buttonDefault\"} onClick={() => this.updateTimeRange(\"medium_term\")}>\n              3 months\n            </button>\n            <button className={(this.state.time_range === 'long_term' ? 'selected ' : '') + \"buttonDefault\"} onClick={() => this.updateTimeRange(\"long_term\")}>\n              Several years\n            </button>\n          </div>\n\n          {scrollButton}\n        </header>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        {Head}\n        {Container}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}