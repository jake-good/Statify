{"version":3,"sources":["Artist.js","App.js","serviceWorker.js","index.js"],"names":["Artist","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","expanded","setState","console","log","container","_this2","genresList","genre","props","artist","genres","react_default","a","createElement","className","src","images","url","id","name","followers","total","href","external_urls","spotify","onClick","toggle","React","Component","spotifyApi","SpotifyWebApi","App","token","getHashParams","access_token","setAccessToken","loggedIn","nowPlaying","albumArt","topArtists","e","hashParams","r","q","window","location","hash","substring","exec","decodeURIComponent","getMyTopArtists","time_range","then","response","items","artistArray","artistImageURLs","i","length","push","map","item","src_Artist","text","possible","charAt","Math","floor","random","generateRandomString","localStorage","setItem","encodeURIComponent","Container","_this3","getData","makeArtists","type","redirect","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNA2DeA,qBAxDb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,UAAU,GAHAR,wEAQZG,KAAKM,SAAS,CACZD,UAAWL,KAAKI,MAAMC,WAExBE,QAAQC,IAAI,2CAGL,IACHC,EADGC,EAAAV,KAEP,GAAKA,KAAKI,MAAMC,SAMT,CACL,IAAIM,EAAa,GACjB,IAAK,IAAIC,KAASZ,KAAKa,MAAMC,OAAOC,OAClCJ,GAAcX,KAAKa,MAAMC,OAAOC,OAAOH,GAAS,KAElDH,EACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKpB,KAAKa,MAAMC,OAAOO,OAAO,GAAGC,OAExCN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIK,GAAG,kBAAkBvB,KAAKa,MAAMC,OAAOU,MAC3CR,EAAAC,EAAAC,cAAA,KAAGK,GAAG,kBAAN,wBACwBvB,KAAKa,MAAMC,OAAOW,UAAUC,OAEpDV,EAAAC,EAAAC,cAAA,KAAGK,GAAG,kBAAN,WAAgCZ,GAChCK,EAAAC,EAAAC,cAAA,KAAGK,GAAG,kBACJP,EAAAC,EAAAC,cAAA,KAAGS,KAAM3B,KAAKa,MAAMC,OAAOc,cAAcC,SACvCb,EAAAC,EAAAC,cAAA,sDAvBVT,EACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,SAAIlB,KAAKa,MAAMC,OAAOU,OA4B5B,OAEER,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASW,QAAS,kBAAMpB,EAAKqB,WACzCtB,UAnDYuB,IAAMC,mBCGrBC,EAAa,WAAIC,GA2GRC,cAxGb,SAAAA,IAAc,IAAAvC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,GAEZ,IACMC,GAFNxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,QACoBsC,gBACCC,aAHT,OAIRF,IACF9B,QAAQC,IAAI,aACZ0B,EAAWM,eAAeH,IAE5BxC,EAAKO,MAAQ,CACXqC,WAAUJ,EACVK,WAAY,CAAElB,KAAM,cAAemB,SAAU,IAC7CC,WAAY,IAXF/C,+EAoBZ,IAJA,IACIgD,EADAC,EAAa,GAEfC,EAAI,uBACJC,EAAIC,OAAOC,SAASC,KAAKC,UAAU,GAC7BP,EAAIE,EAAEM,KAAKL,IACjBF,EAAWD,EAAE,IAAMS,mBAAmBT,EAAE,IAE1C,OAAOC,oCAGC,IAAApC,EAAAV,KACJA,KAAKI,MAAMqC,UACbP,EACGqB,gBAAgB,CAAEC,WAAY,cAC9BC,KAAK,SAAAC,GAAQ,OAAIhD,EAAKJ,SAAS,CAAEsC,WAAYc,EAASC,sDAM3D,IAAItC,EAAS,GACb,GAAIrB,KAAKI,MAAMqC,SAAU,CAGvB,IAFA,IAAImB,EAAc5D,KAAKI,MAAMwC,WACzBiB,EAAkB,GACbC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IACtCD,EAAgBG,KAAKJ,EAAYE,GAAGzC,OAAO,GAAGC,KAEhDD,EAASwC,EAAgBI,IAAI,SAAA3C,GAAG,OAAIN,EAAAC,EAAAC,cAAA,OAAKE,IAAKE,MAEhD,OAAOD,wCAKP,OADcrB,KAAKI,MAAMwC,WAAWqB,IAAI,SAAAC,GAAI,OAAIlD,EAAAC,EAAAC,cAACiD,EAAD,CAAQrD,OAAQoD,mDAI7CH,GAInB,IAHA,IAAIK,EAAO,GACPC,EACF,iEACOP,EAAI,EAAGA,EAAIC,EAAQD,IAC1BM,GAAQC,EAASC,OAAOC,KAAKC,MAAMD,KAAKE,SAAWJ,EAASN,SAE9D,OAAOK,qCAIP,IAEIhE,EAAQJ,KAAK0E,qBAAqB,IAEtCC,aAAaC,QADE,qBACgBxE,GAC/B,IACIkB,EAAM,yCACVA,GAAO,uBACPA,GAAO,cAAgBuD,mBARP,oCAShBvD,GAAO,UAAYuD,mBAJP,qCAKZvD,GAAO,iBAAmBuD,mBATP,yBAUnBvD,GAAO,UAAYuD,mBAAmBzE,GACtC6C,OAAOC,SAAW5B,mCAGX,IACHwD,EADGC,EAAA/E,KAaP,OAXKA,KAAKI,MAAMqC,UAOdzC,KAAKgF,UACLF,EAAY9E,KAAKiF,eAPjBH,EACE9D,EAAAC,EAAAC,cAAA,UAAQgE,KAAK,SAASpD,QAAS,kBAAMiD,EAAKI,aAA1C,uBAUFnE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,MAAIK,GAAG,cAAP,WACAP,EAAAC,EAAAC,cAAA,MAAIK,GAAG,aAAP,mCAEDuD,UAnGS7C,aCKEmD,QACW,cAA7BnC,OAAOC,SAASmC,UAEe,UAA7BpC,OAAOC,SAASmC,UAEhBpC,OAAOC,SAASmC,SAASC,MACvB,2DCZNC,IAASC,OAAOxE,EAAAC,EAAAC,cAACuE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.b4084880.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Artist extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      expanded: false\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      expanded: !this.state.expanded\r\n    });\r\n    console.log(\"toggle\");\r\n  }\r\n\r\n  render() {\r\n    let container;\r\n    if (!this.state.expanded) {\r\n      container = (\r\n        <div className=\"unexpanded_artist_title\">\r\n          <p>{this.props.artist.name}</p>\r\n        </div>\r\n      );\r\n    } else {\r\n      let genresList = \"\";\r\n      for (var genre in this.props.artist.genres) {\r\n        genresList += this.props.artist.genres[genre] + \", \";\r\n      }\r\n      container = (\r\n        <div className=\"expanded_artist\">\r\n          <section className=\"img_box\">\r\n            <img src={this.props.artist.images[0].url} />\r\n          </section>\r\n          <div className=\"artist_details\">\r\n            <h1 id=\"expanded_title\">{this.props.artist.name}</h1>\r\n            <p id=\"expand_details\">\r\n              Number of followers: {this.props.artist.followers.total}\r\n            </p>\r\n            <p id=\"expand_details\">Genres: {genresList}</p>\r\n            <p id=\"expand_details\">\r\n              <a href={this.props.artist.external_urls.spotify}>\r\n                <span>View the artists Spotify page</span>\r\n              </a>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      //In this div display the artist picture, name, popularity and have it link to their spotify page\r\n      <div className=\"Artist\" onClick={() => this.toggle()}>\r\n        {container}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Artist;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Artist from \"./Artist\";\r\n\r\nimport SpotifyWebApi from \"spotify-web-api-js\";\r\nconst spotifyApi = new SpotifyWebApi();\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    const params = this.getHashParams();\r\n    const token = params.access_token;\r\n    if (token) {\r\n      console.log(\"got token\");\r\n      spotifyApi.setAccessToken(token);\r\n    }\r\n    this.state = {\r\n      loggedIn: token ? true : false,\r\n      nowPlaying: { name: \"Not Checked\", albumArt: \"\" },\r\n      topArtists: []\r\n    };\r\n  }\r\n\r\n  getHashParams() {\r\n    var hashParams = {};\r\n    var e,\r\n      r = /([^&;=]+)=?([^&;]*)/g,\r\n      q = window.location.hash.substring(1);\r\n    while ((e = r.exec(q))) {\r\n      hashParams[e[1]] = decodeURIComponent(e[2]);\r\n    }\r\n    return hashParams;\r\n  }\r\n\r\n  getData() {\r\n    if (this.state.loggedIn) {\r\n      spotifyApi\r\n        .getMyTopArtists({ time_range: \"long_term\" })\r\n        .then(response => this.setState({ topArtists: response.items }));\r\n      //this.getArtistPictures();\r\n    }\r\n  }\r\n\r\n  getArtistPictures() {\r\n    let images = \"\";\r\n    if (this.state.loggedIn) {\r\n      let artistArray = this.state.topArtists;\r\n      let artistImageURLs = [];\r\n      for (let i = 0; i < artistArray.length; i++) {\r\n        artistImageURLs.push(artistArray[i].images[0].url);\r\n      }\r\n      images = artistImageURLs.map(url => <img src={url} />);\r\n    }\r\n    return images;\r\n  }\r\n\r\n  makeArtists() {\r\n    let Artists = this.state.topArtists.map(item => <Artist artist={item} />);\r\n    return Artists;\r\n  }\r\n\r\n  generateRandomString(length) {\r\n    var text = \"\";\r\n    var possible =\r\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n    for (var i = 0; i < length; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n  }\r\n\r\n  redirect() {\r\n    var client_id = \"d8c9e8ca3c784898bdf939f51ff6136f\"; // Your client id\r\n    var redirect_uri = \"http://localhost:3000\"; // Your redirect uri\r\n    var state = this.generateRandomString(16);\r\n    var stateKey = \"spotify_auth_state\";\r\n    localStorage.setItem(stateKey, state);\r\n    var scope = \"user-read-private user-read-email\";\r\n    var url = \"https://accounts.spotify.com/authorize\";\r\n    url += \"?response_type=token\";\r\n    url += \"&client_id=\" + encodeURIComponent(client_id);\r\n    url += \"&scope=\" + encodeURIComponent(scope);\r\n    url += \"&redirect_uri=\" + encodeURIComponent(redirect_uri);\r\n    url += \"&state=\" + encodeURIComponent(state);\r\n    window.location = url;\r\n  }\r\n\r\n  render() {\r\n    let Container;\r\n    if (!this.state.loggedIn) {\r\n      Container = (\r\n        <button type=\"button\" onClick={() => this.redirect()}>\r\n          View my top artists\r\n        </button>\r\n      );\r\n    } else {\r\n      this.getData();\r\n      Container = this.makeArtists();\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <h1 id=\"main_title\">Statify</h1>\r\n          <h2 id=\"sub_title\">View your top spotify artists!</h2>\r\n        </header>\r\n        {Container}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}